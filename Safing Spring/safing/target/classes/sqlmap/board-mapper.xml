<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board.mapper">

	<!-- 동영상 정보 불러오기 -->
	<select id="movielist" resultType="board.Board_MovieDTO">
<<<<<<< HEAD
	
	<!-- SELECT * FROM board LEFT JOIN board_file on (board.board_id = board_file.board_id)
	 where board.board_kinds = 'video' 기존.. 아래껀 댓글 수 추가한 것-->
	 
=======
>>>>>>> origin/명운
	SELECT b.*, f.*, c.board_comment_cnt
	FROM board b 
	LEFT JOIN board_file f
	on (b.board_id = f.board_id)
	LEFT JOIN (select board_id, count(*) board_comment_cnt from board_comment group by board_id) c
	on (b.board_id = c.board_id)
	where b.board_kinds = 'video'
	</select>
	
	<!-- 동영상 정보 입력 -->
	<insert id="moviecreate">
	insert into board ( member_id,board_title,board_content,board_kinds)
 	values ( #{member_id},#{board_title} ,#{board_content},#{board_kinds})
	</insert>
	
	<!-- 동영상 정보 수정 -->
	<update id="movieupdate">
		update board set  board_title = #{board_title} ,
		board_content= #{board_content}
		where board_id = #{board_id} AND member_id = #{member_id}
	</update>
	
	<!-- 동영상 정보 삭제 -->
	<delete id="moviedelete">
		delete from board
		where board_id = #{board_id} AND member_id = #{member_id}
	</delete>
	
	
	<!-- 좋아요 정보 수정 -->
	<update id="like">
	UPDATE board SET board_like_cnt = #{board_like_cnt} where board_id = #{board_id}
	</update>
	
	<!-- 댓글 정보 불러오기 -->
	<select id="comment_list" resultType="board.Board_CommentVO">
	 SELECT * FROM board_comment where board_id = #{id} order by comment_regdate ASC
	</select>
	
		<!-- 웹사이트 댓글 정보 불러오기 -->
	<select id="board_comment_list" resultType="board.Board_CommentVO">
	 SELECT * FROM board_comment where board_id = #{id} order by comment_regdate ASC
	</select>
	
	<!-- 댓글 정보 입력 -->
	<insert id="comment_insert">
	insert into board_comment ( member_id,comment_content,board_id)
 	values (#{member_id},#{comment_content},#{board_id})
	</insert>
	
	<!-- 댓글 정보 수정 -->
	<update id="comment_update">
		update board_comment set comment_content= #{comment_content}
		where comment_id =#{comment_id}
	</update>
	
	<!--댓글 정보 삭제 -->
	<delete id="comment_delete">
		delete from board_comment
		where comment_id = #{comment_id} 
	</delete>
	
	<!--댓글수ㅡ정보 가져오기 -->
	<select id="movie_comment_cnt" resultType="int">
		SELECT COUNT(comment_id) FROM board_comment where board_id = #{id} 
	</select>
	
	
		<!-- 전체 게시글 수 조회 -->
	<select id="totalList" resultType="integer">
		select count(*) from board <include refid="where_search" />	
	</select>	

	<!-- 전체 게시글 조회 -->
	<select id="list" resultType="board.BoardVO">
		select b.*, f.file_name, f.file_path
		from ( select rownum no, b.* from ( select * from board <include refid="where_search" />
						order by board_id) b	
				order by no desc ) b
		left outer join (select file_name, file_path, board_id from board_file ) f
		on b.board_id = f.board_id
		where no between #{beginList} and #{endList}
	</select>	
	
	<sql id='where_search'>
		<!-- 제목에 '테스트' 문자가 있는 것을 조회한다면 where title like '테스트' -->
		<if test="search == 'board_title' or search == 'board_content'">
			where ${search} like '%'||#{keyword}||'%'		
		</if>
		<!-- 작성자에 '자' 문자가 있는 것을 조회한다면 member 테이블에서 like를 활용해
		name 에 '자'를 포함한 글자를 찾을 수 있도록 함. -->
		<if test="search == 'member_id'">
			where <include refid="search_member_id" />		
		</if>
	
		<if test="search == 'all' ">
			where BOARD_TITLE like '%'||#{keyword}||'%'
			or BOARD_CONTENT like '%'||#{keyword}||'%'
			or <include refid="search_member_id" />
		</if>
	
	</sql>
	
	
	<sql id = 'search_member_id'>
		member_id in (select member_id from member where member_id like '%'||#{keyword}||'%' )
	</sql>
	
	<!-- 해당 글 삭제 처리 -->
	<delete id="delete">
		delete from board
		where board_id = #{board_id}
	</delete>

	<!-- 해당 글의 조회수 증가 -->
	<update id="read">
		update board set board_read_cnt = board_read_cnt+1
		where board_id = #{board_id}	
	</update>
	
	<!-- 해당 글의 상세 정보 조회 -->
	<select id="detail" resultType="board.BoardVO">
		select b.*,  f.file_name, f.file_path
		from
			( select board.*,
				lag(board_id, 1, 0) over (order by board_id desc) as prev,
				lag(board_title, 1, '이전 글없음') over (order by board_id desc) as prev_title,
				lead(board_id, 1, 0) over (order by board_id desc) as next,
				lead(board_title, 1, '다음 글없음') over (order by board_id desc) as next_title				 
			  from board
			  order by board_id desc) b
			  left outer join (select file_name, file_path, board_id from board_file ) f
				on b.board_id = f.board_id			
		where b.board_id = #{board_id}
	</select>
	
 	<!-- 임시 로그인처리 -->
	<select id="login" resultType="member.MemberVO">
	        select * from member where member_id = #{member_id}
	</select>
	
		<!-- 글 정보 입력 -->
	<insert id="board_insert">
	insert into board ( member_id, board_title, board_content, board_kinds)
 	values (#{member_id},#{board_title},#{board_content},#{board_kinds})
	</insert>
	
		<!-- 글 정보 이미지 입력 -->
	<insert id="board_insert_img">
	insert into board_file ( board_id, file_name, file_path)
 	values (#{board_id},#{file_name},#{file_path})
	</insert>
	
	<!-- 글 정보 이미지 찾기 -->	
	<select id="board_select_img" resultType="board.Board_FileVO">
	 SELECT * FROM BOARD_FILE where board_id = #{id}	
	</select>
	
	<!-- 글 정보 수정 -->
	<update id="board_update">
		update board set  board_title = #{board_title} ,
		board_content= #{board_content}
		where board_id = #{board_id} AND member_id = #{member_id}
	</update>
	
	<!-- 글 정보 이미지 수정 -->
	<update id="board_update_img">
		update board_file set 
		file_name=#{file_name}, file_path = #{file_path}
<<<<<<< HEAD
		where board_id = #{board_id} AND member_id = #{member_id} AND #{board_file_id}
=======
		where board_id = #{board_id}
>>>>>>> origin/명운
	</update>
	
	<!-- 공지사항 게시글 수 조회 -->
	<select id="totalList_no" resultType="integer">
		select count(*) from board where board_kinds = 'notice'  <include refid="where_search_notice" />
	</select>
	
		<!-- 공지사항 게시글 조회 -->
	<select id="list_no" resultType="board.BoardVO">
		select b.*,f.file_name, f.file_path
		from ( select rownum no, b.* from ( select * from board where  board_kinds = 'notice' <include refid="where_search_notice" />
					order by board_id) b	
				order by no desc ) b
		left outer join (select file_name, file_path, board_id from board_file ) f 
		on b.board_id = f.board_id
		where no between #{beginList} and #{endList}
	</select>	
	
		<sql id='where_search_notice'>
		<!-- 제목에 '테스트' 문자가 있는 것을 조회한다면 where title like '테스트' -->
		<if test="search == 'board_title' or search == 'board_content'">
			 and board_kinds = 'notice' AND	( ${search} like '%'||#{keyword}||'%')	
		</if>
		<!-- 작성자에 '자' 문자가 있는 것을 조회한다면 member 테이블에서 like를 활용해
		name 에 '자'를 포함한 글자를 찾을 수 있도록 함. -->
		<if test="search == 'member_id'">
			 and board_kinds = 'notice' AND	 (<include refid="search_member_id" />	)
		</if>
	
		<if test="search == 'all' ">
			 and board_kinds = 'notice' AND (BOARD_TITLE like '%'||#{keyword}||'%'
			or BOARD_CONTENT like '%'||#{keyword}||'%'
			or <include refid="search_member_id" />	 )
		</if>
	
	</sql>
	
<<<<<<< HEAD
=======
		<!-- 유튜브 게시글 수 조회 -->
	<select id="totalList_yu" resultType="integer">
		select count(*) from board where board_kinds = 'youtube'  <include refid="where_search_notice" />
	</select>
	
		<!-- 유튜브 게시글 조회 -->
	<select id="list_yu" resultType="board.BoardVO">
		select * 
		from ( select rownum no, b.* from ( select * from board where  board_kinds = 'youtube' <include refid="where_search_notice" />
						order by board_id) b	
				order by no desc ) b
		where no between #{beginList} and #{endList}
	</select>
>>>>>>> origin/명운
		
		<!-- 방금 만든 board 글 조회 -->
	<select id="board_new"  resultType="integer">
		select MAX(board_id) from board 
	</select>
	
<<<<<<< HEAD
=======
		<!-- 동영상 정보 불러오기 (최신순서)-->
	<select id="movielist_new" resultType="board.Board_MovieDTO">
	SELECT b.*, f.*, c.board_comment_cnt
	FROM board b 
	LEFT JOIN board_file f
	on (b.board_id = f.board_id)
	LEFT JOIN (select board_id, count(*) board_comment_cnt from board_comment group by board_id) c
	on (b.board_id = c.board_id)
	where b.board_kinds = 'video' order by board_writedate DESC
	</select>
	
	
		<!-- 동영상 정보 불러오기 (마이페이지)-->
	<select id="movielist_mypage" resultType="board.Board_MovieDTO">
	SELECT b.*, f.*, c.board_comment_cnt
	FROM board b 
	LEFT JOIN board_file f
	on (b.board_id = f.board_id)
	LEFT JOIN (select board_id, count(*) board_comment_cnt from board_comment group by board_id) c
	on (b.board_id = c.board_id)
	where b.board_kinds = 'video' and b.member_id = #{member_id} order by board_writedate DESC
	</select>
	
>>>>>>> origin/명운
</mapper>
